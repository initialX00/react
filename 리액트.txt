책은 복습용,
해당 링크 입문용   https://react.vlpt.us/   (https://github.com/velopert/react-tutorial)
		https://learnjs.vlpt.us/
토스 클린코드 영상 주기적으로 보기

#리액트
기존 : 화면에서 데이터를 불러와 화면을 수정
리액트 : 화면은 미리 만들고, 데이터만 수정하면 알아서 화면도 바뀜



#수업 구성
JAVA -> servlet
JS -> React(프론트)
       Exprese(백엔드,서버) -> nest.js, next.js



#프로젝트의 구성원리
>node_modules에 라이브러리가 전부 설치되어있다.
>public에 공용파일을 취급한다. (외부에서 조회 가능)
  favicon은 탭에 있는 아이콘.
  index.html랑 favicon이 최소필요조건이다. 나머지는 삭제해도된다.
  public은 기본제공만 사용해도 무관.
>src에서 대부분의 코드를 작성한다.

index.js에 import reportWebVitals from './reportWebVitals';는
html콘솔에 출력을 해준다. 따라서 완성 후 삭제해줘도된다.

ReacDOM으로 리액트 실행한다, render은 시각적 영역을 제공한다



#버추얼 돔
DOM(document object model)
Real-DOM, Virtual-DOM
돔객체가 html에 렌더링을 거쳐 눈에 보이게 되고, 리얼돔에서 일어나는 일이다.
리얼돔에서 렌더링이 일어나기 위해서는 html에서 하위 태그 경로까지 찾아가면서
전체적인 페인팅이 일어나는 번거로움이 있다.
버추얼돔은 경로까지 찾아가기위한 번거로움을 덜기위해 부분렌더링을 한다.
버추얼돔은 메모리에 존재하는 가상의 돔으로,
리얼돔을 복사하여 데이터 변경 후 리얼돔과 비교하여, 다른 부분만 리얼돔에 페인팅한다.









#서버
npm start으로 서버 실행
터미널 콘솔창에 ctrl + c로 서버 종료


#컴포넌트
컴포넌트는 <App />처럼 호출한다.
컴포넌트란 html을 리턴하는 함수를 말한다.
일반함수는 소문자로 표현하지만 컴포넌트는 대문자로 시작한다.
하나의 폴더 당 하나의 파일을 작성한다.

변수는 {}중괄호를 쳐준다


#태그 규칙
ㅇ반드시 닫아야한다.
   <input> 태그의 경우 html에선 닫지 않았지만 <inpu />로 닫아줘야한다.
ㅇ두개이상의 태그는 무조건 하나의 태그로 감싸줘야한다.
   <div>태그로 감싸거나 그룹을 나눠주는 빈태그인 <React.Fragment>나 <>을 사용한다.


#호출
컴포넌트
export시 컴포넌트는 default를 붙인다.
default 선언됐을경우 호출명을 임의로 할 수 있다.

일반함수
export시 일반함수는 fuction에 써야한다.
일반함수는 이름을 바꿀 수 없고 import에서 {}중괄호를 씌워준다.


#파일명
컴포넌트는 소문자로 작성했을 경우 인식이 안된다.
임포트 이후 파일 이름을 수정해도 오류가 뜬다.(비주얼 스튜디오 버그임)
  이름 변경 -> 원본파일(폴더) 카피 -> 임포트 삭제 -> 원본파일 삭제 ->
  -> 껏다킨 후 -> 카피를 원본파일명으로 변경 -> 임포트 작성
이름 잘못 적은 상태로 임포트하면 귀찮아지니까 처음부터 잘해야한다.



#props
properties(속성)의 준말로, 리액트의 매개변수에서 공용으로 사용되는 객체이다.
컴포넌트는 매개변수를 하나밖에 받아오지 못한다.
props는 객체로 취급되어, 속성을 바꾸어 입력을 받는다.

기존의 매개변수인 props는 공용이었지만
비구조할당을 통해 보다 직관적으로 매개변수를 사용할 수 있다.
비구조할당이란 배열이나 객체의 속성을 해체하여 개별 변수에 담는것을 말한다.




#useState
함수의 재호출 시 초기화 선언때문에 화면에 출력되는 값이 초기값으로 계속 변경된다.
외부메모리를 통해 재호출 시 초기화시키지 않고 진행할 수 있다.
userState는 외부메모리이기에 setter역할을 하는 함수를 통해 값을 수정한다.

비구조할당으로 변수를 세팅해준다.
이때 첫번째 요소가 현재상태를 나타내는 일반변수, 두번째 요소가 setter함수이다.

쿼리셀렉터는 리얼돔에 접근하기에 리액트에서는 사용하지 않는다.


#Hooks 함수
use~ 형태의 함수를 훅함수라 한다. 그외는 일반함수, 컴포넌트가 있다.
useSate(비동기), useRef(동기)
외부메모리를 통해 함수 재호출 시 초기화되지 않는다.



#클린코드
짧은 코드가 아닌 로직을 쉽게 이해하기위해 표현한 코드



#Ref
리액트에서 DOM을 선택하는 명령어
쿼리셀렉터는 리얼돔에 접근하기에 가상돔을 사용하는 리액트에서는 ref를 사용한다.
함수형 컴포넌트에는 useRef,
클래스형 컴포넌트에는 React.createRef를 사용한다.

useRef() 생성지 메모리 생성 - 해당 메모리가 있는 함수의 위치를 current로 찾을 수 있다.



#useEffect
함수를 비동기가 아닌 동기로 실행할때 사용한다.
처음 실행때 반드시 한번은 동작하고,
상태가 변할때 return을 반환 후 다시 작동한다.
return은 필요에 따라 생략할 수 있다.
userEffect(함수명, [ ])로 두번쨰 인자를 통해 의존성을 부여하여 특정 조건일 때만 실행하게 할 수 있다.
두번째 인자의 값이 변할 때만 동작을 하며, 인자를 공백으로 하는 경우 최초 실행 시에만 동작한다.
배열의 인자가 복수일 경우 or로 취급된다
처음 실행시 useEffect가 호출은 되지만 useEffect 내의 함수들은 return때 실행된다.







#비동기

콜백함수 :: 함수의 매개변수로 전달되는 함수
hoisting으로 인해 var, function은 최상단에서 실행된다.
html로 요청하는 콜백함수는 비동기처럼 쓸 수 있고, 그외는 동기처럼 쓸 수 있다

***중요***
ㅇ Promise(resolve, reject)
    then, catch, finally
    
 Promise 생성자 생성시 즉시 실행된다.
	함수를 비동기로 호출한다.
    resolve: 결정하다, reject: 거부하다

 then, catch, finally 콜백함수를 사용한다.
    우선 순위가 낮아서 비동기 실행된다.
    return이 Promise라서 키워드를 이어서 사용가능하다.
    throw으로 에러처리하여 다음 catch로 전달
    return으로 반환된 값이 다음 then에 전달

 then 
    resolve시 실행된다. reject때여도 실행이 안 될뿐이지 호출은 된다.
     
 catch
    reject시 실행된다. resolve때여도 실행이 안 될뿐이지 호출은 된다.

 then,catch는 Promise를 반환한다
 const then = (fx) => {
     return new Promise((resolve) => resolve(fx()));
 }




async / await

 async로 함수를 비동기로 호출하고,
 await으로 async 내부 함수의 비동기 연산을 기다려서, 동기가 되도록한다.
 예외처리를 항상 해줘야한다.
 then, catch, finally 쓰지 않아도 된다
 비동기함수에는 사용할 수 없다.

 async 키워드를 함수에 사용하면 리턴 자료형이 Promise객체가 된다.

 await의 키원드 사용 조건
 Promise 객체 앞에 사용할 수 있다.
 1.await은 async 함수 안에서만 사용가능하다.
 2.await은 promise를 return하는 함수에만 사용가능하다.




